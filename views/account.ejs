<%- include('/metadata', { title: 'Account' }) %>
<style>
  #deleteAccount {
    display: block;
  }

  .form {
    display: flex;
    flex-direction: column;
    margin-bottom: 1em;
  }

  .form>label {
    margin-bottom: 0.5em;
  }

  .form>input {
    margin-bottom: 2em;
  }

</style>
<%- include('/password') %>

<%- include('/nav', { authenticated }) %>
<main>
  <%- include('/logo') %>
  <h2>Welcome <%= user %>!</h2>
  <div class="form">
    <label for="currentPwd">Current password</label>
    <x-password>
      <input slot="input" id="currentPwd" type="password"
          autocomplete="current-password" required autofocus>
    </x-password>
    <label for="newPwd">New password</label>
    <x-password>
      <input slot="input" id="newPwd" type="password"
          autocomplete="new-password"
          pattern="(?=.*?\d)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[!-/:-@[-`{-~])[!-~]*"
          minlength="11" maxlength="128" required>
    </x-password>
    <% for (const { message } of flash) { %>
    <p class="message"><strong><%= message %></strong></p>
    <% } %>
    <button id="updatePwd" type="button">Update</button>
    <script type="module">
      const currentPwd = document.getElementById('currentPwd');
      const newPwd = document.getElementById('newPwd');
      const update = document.getElementById('updatePwd');

      newPwd.addEventListener('input', event => {
        const validity = newPwd.validity;
        const message =
          validity.tooShort ? 'Minimum length is 11' :
            validity.tooLong ? 'Maximum length is 128' :
              validity.patternMismatch ? `Required:
  1 small letter
  1 capital letter
  1 digit
  1 symbol
  
  Forbidden:
  spaces
  control characters
  non-ascii characters` :
                newPwd.value === currentPwd.value ? 'Same password' : '';

        newPwd.setCustomValidity(message);
      });

      const addClickListener = handler =>
        update.addEventListener('click', handler, { once: true });

      const handler = async event => {
        try {
          for (const input of [currentPwd, newPwd]) {
            if (!input.reportValidity()) {
              addClickListener(handler);
              return;
            }
          }

          const payload = {
            currentPwd: currentPwd.value,
            newPwd: newPwd.value
          };
          const response = await fetch(`/api/password`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });

          if (response.ok) location.reload();
          else throw new HTTPError;
        } catch (err) {
          console.error(err);
          alert(err instanceof HTTPError ?
            'Operation failed.' : 'Network error');
          addClickListener(handler);
        }
      };

      addClickListener(handler);

      currentPwd.addEventListener('keyup', event => {
        if (event.key === 'Enter') update.click();
      });

      newPwd.addEventListener('keyup', event => {
        if (event.key === 'Enter') update.click();
      });
    </script>
  </div>
  <button id="deleteAccount" type="button" class="delete">Delete
    account</button>
  <script type="module">
    const target = document.getElementById('deleteAccount');
    const logoutButton = document.querySelector('#logout>button');

    const addClickListener = handler =>
      target.addEventListener('click', handler, { once: true });

    const handler = async event => {
      const msg = 'Erase all my data now';
      const result = prompt(`This action is irreversible!
To confirm enter this message: ${msg}`);

      if (result === msg) {
        try {
          const response = await fetch('/account', { method: 'DELETE' });

          if (response.ok) logoutButton.click();
          else throw new HTTPError;
        } catch (err) {
          console.error(err);
          alert(err instanceof HTTPError ?
            'Operation failed.' : 'Network error');
          addClickListener(handler);
        }
      } else addClickListener(handler);
    }
    addClickListener(handler);
  </script>
</main>
<%- include('/footer') %>
