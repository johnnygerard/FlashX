<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('/metadata', { title: 'Training' }) %>
  <%- include('/addClickListener') %>
  <style>
    #sessionStart {
      margin: auto;
    }

    #sessionStart>select {
      margin-right: 1em;
      padding: 0.5em;
      border-radius: 0.4em;
      border: none;
    }

    #sessionStart>select:focus-visible {
      outline: 1px solid black;
    }

    #flashcard {
      margin: auto;
      width: fit-content;
    }

    .side {
      text-align: center;
    }

    .side>p,
    .side>label {
      display: block;
      background-color: var(--accent-secondary);
    }

    .side>label {
      border-bottom: 2px solid black;
      padding: 0.4em;
      border-radius: 0.5em 0.5em 0 0;
      margin-bottom: 2em;
    }

    .side>p {
      margin: 0 0 2em 0;
      padding: 1em;
      border-radius: 0.5em;
    }

    #score {
      margin: 1em auto;
      width: fit-content;
    }

    #success {
      margin-right: 1em;
    }

    #cancel {
      position: absolute;
      right: 1em;
      top: 1.4em;
    }

    #cancel:hover,
    #cancel:focus-visible {
      color: #C00;
      background-color: white;
      outline: 2px solid #C00;
      outline-offset: -2px;
    }

  </style>
</head>

<body>
  <%- include('/nav', { authenticated }) %>

  <main>
    <%- include('/logo') %>
    <div id="sessionStart" class="form">
      <select autofocus>
        <% for (const fset of fsets) { %>
        <option label="<%= fset %>"></option>
        <% } %>
      </select>
      <button type="button" class="positiveAction">Start session</button>
    </div>
    <div id="flashcard" hidden>
      <div id="question" class="form side" hidden>
        <label>Question</label>
        <p>
          <!-- question placeholder -->
        </p>
        <button type="button" class="link">Answer</button>
      </div>
      <div id="answer" class="form side" hidden>
        <label>Answer</label>
        <p>
          <!-- answer placeholder -->
        </p>
        <button id="success" type="button"
            class="positiveAction">Success</button>
        <button id="fail" type="button" class="delete">Fail</button>
      </div>
      <button id="cancel" type="button">Cancel</button>
    </div>
    <p id="score" hidden></p>
    <script type="module">
      const sessionStart = document.getElementById('sessionStart');
      const questionFrame = document.getElementById('question');
      const answerFrame = document.getElementById('answer');
      const fail = document.getElementById('fail');
      const success = document.getElementById('success');
      const scoreReport = document.getElementById('score');
      const cancelButton = document.getElementById('cancel');
      const CANCEL_ERR_MSG = 'Session canceled';
      const nav = document.querySelector('nav');
      const select = sessionStart.querySelector('select');
      const startButton = sessionStart.querySelector('button');
      const answerButton = questionFrame.querySelector('button');
      const question = questionFrame.querySelector('p');
      const answer = answerFrame.querySelector('p');
      const flashcardDiv = document.getElementById('flashcard');

      let res; // resolve
      let rej; // reject

      const hide = element => element.hidden = true;
      const show = element => element.hidden = false;

      fail.addEventListener('click', () => res(false));
      success.addEventListener('click', () => res(true));
      cancelButton.addEventListener('click', () => {
        rej(Error(CANCEL_ERR_MSG));
        hide(questionFrame);
        hide(answerFrame);
        hide(flashcardDiv);
        show(nav);
        show(sessionStart);
      });
      answerButton.addEventListener('click', () => {
        hide(questionFrame);
        show(answerFrame);
      });

      const attach = handler =>
        startButton.addEventListener('click', handler, { once: true });

      const handler = async event => {
        try {
          const response = await fetch(`/api/flashcard/${select.selectedIndex}`);

          if (response.ok) {
            const flashcards = await response.json();
            let score = 0;

            hide(scoreReport);
            hide(sessionStart);
            hide(nav);
            show(flashcardDiv);
            for (const flashcard of flashcards) {
              question.innerText = flashcard.question;
              answer.innerText = flashcard.answer;
              show(questionFrame);
              if (await new Promise((resolve, reject) => {
                res = resolve;
                rej = reject;
              })) score++;
              hide(answerFrame);
            }
            hide(flashcardDiv);
            scoreReport.innerText = `Score: ${score}/${flashcards.length}`;
            show(nav);
            show(sessionStart);
            show(scoreReport);
          } else {
            alert('Operation failed.');
          }
        } catch (err) {
          if (err.message === CANCEL_ERR_MSG) return;
          console.error(err);
          alert('Network error');
        } finally {
          attach(handler);
        }
      };
      attach(handler);
    </script>
  </main>

</body>

</html>
